name: TLS Testing
on: [push, pull_request]

jobs:
 test:
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v3
     
     - name: Install Docker Compose
       run: sudo apt-get install -y docker-compose
     
     - name: Build and Start Containers
       run: |
         docker compose build --no-cache
         docker compose up -d
     
     - name: Install DNS Tools
       run: |
         docker exec client-container apt-get update
         docker exec client-container apt-get install -y dnsutils iputils-ping net-tools
         
     - name: Basic Container Test
       run: |
         docker compose up -d
         docker ps
         docker network ls
         docker inspect client-container | grep IPAddress
         docker inspect server-container | grep IPAddress
     
     - name: Debug Network
       run: |
         docker network ls
         docker network inspect team15-project5-test_default
         docker exec client-container cat /etc/hosts
         docker inspect server-container | grep IPAddress
         docker exec client-container ping -c 2 server-container
         
     - name: Check Shared Volume
       run: |
         docker exec client-container ls -la /shared/
         docker exec server-container ls -la /shared/
         
     - name: Test TLS Setup
       run: |
         docker exec client-container curl -v --cert /shared/client.crt \
           --key /shared/client.key -k https://server-container
     
     - name: Capture TLS Traffic
       run: |
         mkdir -p artifacts/pcap
         docker exec client-container tcpdump -i any -w /shared/tls_handshake.pcap &
         sleep 2
         docker exec client-container curl -v --cert /shared/client.crt \
           --key /shared/client.key -k https://server-container
         sleep 2
         docker exec client-container pidof tcpdump | xargs docker exec client-container kill
         docker cp client-container:/shared/tls_handshake.pcap artifacts/pcap/
         
     - name: Create CA Directory
       run: docker exec server-container mkdir -p /etc/nginx/ca

     - name: Generate CA Certificate
       run: |
         docker exec server-container bash -c '
         cd /etc/nginx/ca &&
         openssl genrsa -out ca.key 4096 &&
         openssl req -x509 -new -nodes -key ca.key -sha256 -days 365 -out ca.crt -subj "/CN=MyCA" &&
         cp ca.crt /shared/'

     - name: Enable mTLS   
       run: |
         docker exec server-container bash -c 'cat > /etc/nginx/conf.d/ssl.conf << EOF
         ssl_protocols TLSv1.3;
         ssl_client_certificate /etc/nginx/ca/ca.crt;
         ssl_verify_client on;
         EOF'
         docker exec server-container nginx -s reload
         
     - name: Copy CA Certificate
       run: |
         docker exec server-container cp /shared/ca.crt /etc/nginx/ca/

#     - name: mTLS Test Phase
#       run: |
#         docker exec client-container curl -v --cert /shared/client.crt \
#           --key /shared/client.key --cacert /shared/ca.crt https://server-container

     - name: Install easy-rsa
       run: docker exec server-container apt-get install -y easy-rsa

     - name: Setup EasyRSA
       run: |
         docker exec server-container bash -c '
         mkdir /etc/nginx/easy-rsa
         cp -r /usr/share/easy-rsa/* /etc/nginx/easy-rsa/
         cd /etc/nginx/easy-rsa
         ./easyrsa init-pki
         echo "set_var EASYRSA_ALGO ec" > vars
         echo "set_var EASYRSA_DIGEST sha512" >> vars
         echo "set_var EASYRSA_CURVE secp384r1" >> vars
         ./easyrsa build-ca nopass
         ./easyrsa gen-req server-container nopass
         ./easyrsa sign-req server server-container
         ./easyrsa gen-req client-container nopass
         ./easyrsa sign-req client client-container
         cp pki/ca.crt /etc/nginx/ca/
         cp pki/issued/server-container.crt /etc/nginx/certs/server.crt
         cp pki/private/server-container.key /etc/nginx/certs/server.key
         cp pki/issued/client-container.crt /shared/client.crt
         cp pki/private/client-container.key /shared/client.key'

     - name: Test Without Client Cert
       run: |
         docker exec client-container tcpdump -i any -w /shared/mtls_fail.pcap &
         sleep 2
         docker exec client-container curl -v https://server-container || true
         sleep 2
         docker exec client-container pidof tcpdump | xargs docker exec client-container kill

     - name: Test With Client Cert
       run: |
         docker exec client-container tcpdump -i any -w /shared/mtls_success.pcap &
         sleep 2
         docker exec client-container curl -v --cert /shared/client.crt \
           --key /shared/client.key --cacert /etc/nginx/ca/ca.crt https://server-container
         sleep 2
         docker exec client-container pidof tcpdump | xargs docker exec client-container kill

     - name: Revoke Client Cert
       run: |
         docker exec server-container bash -c '
         cd /etc/nginx/easy-rsa
         ./easyrsa revoke client-container
         ./easyrsa gen-crl'